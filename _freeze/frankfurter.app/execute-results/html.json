{
  "hash": "bea2bf194a8bffa09f815098831af441",
  "result": {
    "engine": "knitr",
    "markdown": "---\nparams:\n  source: \"https://github.com/JohnGavin/quarto-webr-pyodide-demo/actions/workflows/static.yml\"\n  source_upstream: \"https://talks.thecoatlessprofessor.com/stats352-guest-lectures-on-dynamic-interactions-wasm/day02d-currency.html\"\nwebr: \n  # pks in doc header's packages key _above_ filters statement\n  show-startup-message: false # disable webR status \n  packages: # install on doc open\n  - \"jsonlite\"\n  - \"dplyr\"\n  - \"dplyr\"\n  - \"ggplot2\"\n  - \"pacman\"\n  # ['pacman', 'ggplot2', 'dplyr'] \n  # https://quarto-webr.thecoatlessprofessor.com/qwebr-internal-cell.html\n    # context: output # only shows chunk outputs\n    # context: setup # shows neither output nor code\nexecute:\n  freeze: auto\n  echo: true\n  message: true\n  warning: true\n  fig-align: center\n  fig-width: 12\n  fig-height: 8\n  editor_options: \n    chunk_output_type: inline\n    code-overflow: wrap\n  html:\n    code-fold: true\n    code-tools: true\nengine: knitr\ntags: [\"timeseries\", \"FX\", \"exchange rates\",\n  \"currency\"]\nfilters:\n  - webr\n  # - pyodide\nformat: html\ndate: \"2024-05-15\"\ntitle: \"FX currencies via frankfurter.app\"\nsubtitle: \"Dynamic webr\"\nfooter: \"https://github.com/JohnGavin/quarto-webr-pyodide-demo/actions/workflows/static.yml\"\neditor: source\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n# webr::install(\"pacman\")\n# install.packages(\"pacman\")\npacman::p_load(jsonlite, dplyr, ggplot2)\nsearch() |> head(4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \".GlobalEnv\"       \"package:ggplot2\"  \"package:dplyr\"    \"package:jsonlite\"\n```\n\n\n:::\n\n```{.r .cell-code}\n.libPaths()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/usr/local/lib/R/site-library\" \"/usr/local/lib/R/library\"     \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::knit_engines$set(webr = function(options) {\n  # the source code is in options$code; just do\n  # whatever you want with it\n  # https://quarto-webr.thecoatlessprofessor.com/qwebr-troubleshooting.html#engine-registration\n  # https://bookdown.org/yihui/rmarkdown-cookbook/custom-engine.html\n  knitr::knit_engines$set()\n})\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngert::git_add('frankfurter.app.qmd') |> \n  filter(!staged) |> \n  pull(file) |> # all unstaged files\n  gert::git_add() # add all other files to staging\ngert::git_commit_all('commit gert sample commands')\ngert::git_pull()\ngert::git_push()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nquarto preview\nquarto render\n```\n:::\n\n\n\n## Source\n+ (thecoatlessprofessor...dynamic-interactions-wasm)[https://talks.thecoatlessprofessor.com/stats352-guest-lectures-on-dynamic-interactions-wasm/day02d-currency.html]\n\nSource: datageeek.com[^1]\n[^1]: (url)[https://github.com/JohnGavin/quarto-webr-pyodide-demo/actions/workflows/static.yml] \n\n+ Reference[^2]\n[^2]: [frankfurter.app/docs/#timeseries](frankfurter.app/docs/#timeseries)\n\n## Code\n\n\n::: {.cell}\n\n```{.webr .cell-code}\ndata_url = \"https://www.frankfurter.app/2024-05-01..?to=USD\"\ndownload.file(data_url, \"./currency-data.json\")\n```\n:::\n\n::: {.cell}\n\n```{.webr .cell-code}\ncurrency_json <- fromJSON(\"./currency-data.json\")\n```\n:::\n\n::: {.cell}\n\n```{.webr .cell-code}\ncurrency_df <- data.frame(\n  amount = currency_json$amount,\n  base = currency_json$base,\n  start_date = currency_json$start_date,\n  end_date = currency_json$end_date,\n  rates_date = as.Date(names(currency_json$rates)),\n  rate = unlist(lapply(currency_json$rates, function(x) x$USD))\n) |> \n  as_tibble()\ncurrency_df |> head()\n```\n:::\n\n\n```{webr-r ggplot}\n#| label: ggplott\n\ncurrency_df |> \n  ggplot() +\n  geom_line(aes(x = rates_date,\n                y = rate,\n                colour = base)) +\n  # title = \"Rate per USD ($)\" +\n  theme(legend.title = element_blank(),\n        legend.position = \"bottom\",\n        axis.title.x = element_blank()  )\n```\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}